name: OpenWRT APU2 Image Builder
on:
  push:
    branches: [ master ]
  pull_request:
    branches:
      - master
  schedule:
    - cron:  '0 0 * * *'

jobs:
  commits:
    runs-on: ubuntu-latest
    name: "Check for new commits"
    outputs:
      new: ${{ steps.check.outputs.NEW }}
    steps:
    - name: Check for new commits on OpenWRT Master
      id: check
      run: |
        rev_remote=$(git ls-remote https://github.com/openwrt/openwrt.git HEAD | awk '{print $1=substr($1,1,10)}' | tr -d "\n")
        echo "$rev_remote"
        rev_last_build=$(curl "https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/gh-pages/latest-build.rev" -s | cut -d'-' -f2 | tr -d "\n")
        echo "$rev_last_build"
        if [ "$rev_remote" != "$rev_last_build" ] || [ "$GITHUB_EVENT_NAME" = "pull_request" ] || [ "$GITHUB_EVENT_NAME" = "push" ]; then
          echo ::set-output name=NEW::true ;
        fi

  build-image:
    runs-on: ubuntu-latest
    name: "Build Image"
    needs: commits
    if: ${{needs.commits.outputs.new}}
    steps:
    - name: Checkout config
      uses: actions/checkout@v2
      with:
        path: 'openwrt-apu'

    - name: Free disk space
      run: |
        cd openwrt-apu
        chmod +x ./free-space.sh
        ./free-space.sh

    - name: Host info
      run: |
        echo "Disk space:"
        df -h /
        echo "Workspace:"
        du -h -d 1 .
        echo "Repo HEAD:"
        cd openwrt-apu && git rev-parse HEAD && cd ..

    - name: Clone OpenWRT
      id: clone-openwrt
      run: |
        git clone https://git.openwrt.org/openwrt/openwrt.git openwrt
        cd openwrt
        echo $(./scripts/getver.sh) >> ../latest-build.rev
        cat ../latest-build.rev

    - name: Build
      run: |
        BUILD_REV=$(cat ./latest-build.rev)
        REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d"/" -f2)
        REPO_URL=https://${GITHUB_ACTOR}.github.io/${REPO_NAME}/${BUILD_REV}
        cp ./openwrt-apu/latest-master.html.in ./latest-master.html
        sed -i -e 's#%URL%#'$REPO_URL'/targets/x86/64#g' ./latest-master.html
        echo 'CONFIG_IMAGEOPT=y' >> ./openwrt-apu/.config-apu2-docker
        echo 'CONFIG_VERSIONOPT=y' >> ./openwrt-apu/.config-apu2-docker
        echo 'CONFIG_VERSION_REPO="'${REPO_URL}'"' >> ./openwrt-apu/.config-apu2-docker
        echo 'CONFIG_PER_FEED_REPO=y' >> ./openwrt-apu/.config-apu2-docker
        echo '# CONFIG_FEED_routing is not set'
        echo '# CONFIG_FEED_telephony is not set'
        echo ''
        cat ./openwrt-apu/.config-apu2-docker
        echo ''
        chmod +x ./openwrt-apu/build.sh
        docker pull openwrtorg/imagebuilder
        docker run --rm -v ${GITHUB_WORKSPACE}:/home/build/openwrt openwrtorg/imagebuilder ./openwrt-apu/build.sh
        sudo chown -R $(id -u):$(id -g) .
        if grep -q -i error build.log; then
          echo "-------------------------------"
          echo 'Build Error!'
          echo "-------------------------------"
          grep -i error build.log
          echo "-------------------------------"
          exit -1
        fi;
        mv -f openwrt/bin artifacts
        rm -rf openwrt

    - name: Prepare and deploy pages
      env:
        GITHUB_TOKEN: ${{ secrets.push_token }}
      run: |
        BUILD_REV=$(cat ./latest-build.rev)
        sudo apt-get update -q
        sudo apt-get install tree -q -y
        pages_branch="gh-pages"
        repo_url=https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
        git clone -b "${pages_branch}" "${repo_url}" "${pages_branch}"
        cd ${pages_branch}
        # Reset to empty init commit, we won't save the history of gh-pages due to 1 GB quota
        git reset --hard $(git rev-list --max-parents=0 HEAD)
        mkdir ${BUILD_REV}
        mv -f ../artifacts/* ./${BUILD_REV}
        find . -type d -exec sh -c 'cd $0 && tree -H '.' -L 1 --noreport --charset utf-8 > "./0_index.html"' {} \;
        find . -name '*.html' -exec sed -i -e 's#<a href=".">.</a><br>#<a href="../0_index.html">..</a><br>#g' {} \;
        find . -name '*.html' -exec sed -i -e 's#/">#/0_index.html">#g' {} \;
        sed -i -e 's#<a href="../0_index.html">..</a><br>#<a href="./0_index.html">.</a><br>#g' ./0_index.html
        find . -name '*.html' -exec sed -i '/0_index.html<\/a><br>/d' {} \;
        find . -type d -exec sh -c 'cd $0 && mv 0_index.html index.html' {} \;
        find . -name '*.html' -exec sed -i -e 's/0_index.html/index.html/g' {} \;
        cp ../latest-master.html .
        cp ../latest-build.rev .
        curl -s -X POST "https://img.shields.io/badge/Revision-$(cat ./latest-build.rev | sed 's/-/_/g')-blue" > ./revision.svg
        git add .
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        if [ "$GITHUB_EVENT_NAME" = "schedule" ]; then
          git commit -m "nightly build"
        else
          git commit -m "integration build"
        fi
        if [ "$GITHUB_EVENT_NAME" != "pull_request" ]; then
          git push -f "${repo_url}" HEAD:${pages_branch}
        fi

    - name: On failure
      if: failure()
      run: |
        echo "Disk space:"
        echo "-------------------------------"
        df -h /
        echo ""
        echo "Repo HEAD:"
        echo "-------------------------------"
        cd openwrt-apu
        git rev-parse HEAD
        echo ""
        echo "Repo Content:"
        echo "-------------------------------"
        ls -al
        cd ..
        echo ""
        echo "Config:"
        echo "-------------------------------"
        cat ./openwrt-apu/.config-apu2-docker
        echo ""
        echo "Event path:"
        echo "-------------------------------"
        cat ${GITHUB_EVENT_PATH}
